// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/upgradeinfo/service (interfaces: State)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/juju/juju/domain/upgradeinfo/state"
	version "github.com/juju/version/v2"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AllProvisionedControllersReady mocks base method.
func (m *MockState) AllProvisionedControllersReady(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllProvisionedControllersReady", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProvisionedControllersReady indicates an expected call of AllProvisionedControllersReady.
func (mr *MockStateMockRecorder) AllProvisionedControllersReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProvisionedControllersReady", reflect.TypeOf((*MockState)(nil).AllProvisionedControllersReady), arg0)
}

// EnsureUpgradeInfo mocks base method.
func (m *MockState) EnsureUpgradeInfo(arg0 context.Context, arg1 string, arg2, arg3 version.Number) (state.Info, []state.InfoControllerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUpgradeInfo", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(state.Info)
	ret1, _ := ret[1].([]state.InfoControllerNode)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnsureUpgradeInfo indicates an expected call of EnsureUpgradeInfo.
func (mr *MockStateMockRecorder) EnsureUpgradeInfo(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUpgradeInfo", reflect.TypeOf((*MockState)(nil).EnsureUpgradeInfo), arg0, arg1, arg2, arg3)
}

// IsUpgrading mocks base method.
func (m *MockState) IsUpgrading(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgrading", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgrading indicates an expected call of IsUpgrading.
func (mr *MockStateMockRecorder) IsUpgrading(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgrading", reflect.TypeOf((*MockState)(nil).IsUpgrading), arg0)
}

// SetControllerDone mocks base method.
func (m *MockState) SetControllerDone(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerDone", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerDone indicates an expected call of SetControllerDone.
func (mr *MockStateMockRecorder) SetControllerDone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerDone", reflect.TypeOf((*MockState)(nil).SetControllerDone), arg0, arg1)
}

// StartUpgrade mocks base method.
func (m *MockState) StartUpgrade(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUpgrade", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartUpgrade indicates an expected call of StartUpgrade.
func (mr *MockStateMockRecorder) StartUpgrade(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUpgrade", reflect.TypeOf((*MockState)(nil).StartUpgrade), arg0)
}
